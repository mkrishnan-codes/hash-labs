{"version":3,"sources":["features/404/NotFound.jsx","features/weather/Weather.jsx","config/openweather.js","features/home/Home.jsx","router/router-config.js","layout/Header.jsx","layout/Main.jsx","layout/AppLayout.jsx","router/Router.jsx","App.js","features/counter/counterAPI.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["NotFound","location","useLocation","pathname","Weather","useState","weatherData","setweatherData","getWeather","a","fetch","then","response","json","data","catch","e","useEffect","JSON","stringify","HomePage","routes","path","exact","inner","component","Home","pages","ResponsiveAppBar","React","anchorElNav","setAnchorElNav","handleCloseNavMenu","AppBar","position","Container","maxWidth","Toolbar","disableGutters","Typography","variant","noWrap","sx","mr","display","xs","md","Box","flexGrow","IconButton","size","aria-label","aria-controls","aria-haspopup","onClick","event","currentTarget","color","Menu","id","anchorEl","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","open","Boolean","onClose","map","page","MenuItem","textAlign","Button","my","Main","props","Header","className","children","AppLayout","console","log","RouteWithSubRoutes","route","render","AppRouter","i","theme","createTheme","palette","primary","red","secondary","lightBlue","App","ThemeProvider","fetchCount","amount","Promise","resolve","setTimeout","incrementAsync","createAsyncThunk","counterSlice","createSlice","name","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","store","configureStore","reducer","counter","counterReducer","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uNAceA,EAXE,WAChB,IAAIC,EAAWC,cACf,OACC,8BACC,gDACe,+BAAOD,EAASE,iB,iCCcnBC,EAnBC,WACZ,MAAsCC,mBAAS,MAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACMC,EAAU,uCAAG,sBAAAC,EAAA,+EACRC,MAAM,6EAAD,OCNI,qCDOXC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACFP,EAAeO,MAChBC,OAAM,SAACC,GAAD,OAAOT,EAAeS,OALpB,2CAAH,qDAUhB,OAHAC,qBAAU,WACNT,MACD,IAEC,8BACKU,KAAKC,UAAUb,MENbc,EARE,WAChB,OACC,8BACC,cAAC,EAAD,OCAUC,EAAS,CACrB,CACCC,KAAM,IACNC,OAAO,EACPC,OAAO,EACPC,UAAWC,GAEZ,CACCJ,KAAM,QACNE,OAAO,EACPC,UAAWC,GAYZ,CACCJ,KAAM,IACNG,UAAWzB,I,kGChBP2B,EAAQ,CAAC,WA4HAC,EAzHU,WACvB,MAAsCC,WAAe,MAArD,mBAAOC,EAAP,KAAoBC,EAApB,KAUMC,EAAqB,WACzBD,EAAe,OAMjB,OACE,cAACE,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACE,cAACC,EAAA,EAAD,CAAWC,SAAS,KAApB,SACE,eAACC,EAAA,EAAD,CAASC,gBAAc,EAAvB,UACE,cAACC,EAAA,EAAD,CACEC,QAAQ,KACRC,QAAM,EACNhB,UAAU,MACViB,GAAI,CAAEC,GAAI,EAAGC,QAAS,CAAEC,GAAI,OAAQC,GAAI,SAJ1C,mBASA,eAACC,EAAA,EAAD,CAAKL,GAAI,CAAEM,SAAU,EAAGJ,QAAS,CAAEC,GAAI,OAAQC,GAAI,SAAnD,UACE,cAACG,EAAA,EAAD,CACEC,KAAK,QACLC,aAAW,0BACXC,gBAAc,cACdC,gBAAc,OACdC,QAjCc,SAACC,GACzBxB,EAAewB,EAAMC,gBAiCXC,MAAM,UANR,SAQE,cAAC,IAAD,MAEF,cAACC,EAAA,EAAD,CACEC,GAAG,cACHC,SAAU9B,EACV+B,aAAc,CACZC,SAAU,SACVC,WAAY,QAEdC,aAAW,EACXC,gBAAiB,CACfH,SAAU,MACVC,WAAY,QAEdG,KAAMC,QAAQrC,GACdsC,QAASpC,EACTU,GAAI,CACFE,QAAS,CAAEC,GAAI,QAASC,GAAI,SAfhC,SAkBGnB,EAAM0C,KAAI,SAACC,GAAD,OACT,cAACC,EAAA,EAAD,CAAqBjB,QAAStB,EAA9B,SACE,cAACO,EAAA,EAAD,CAAYiC,UAAU,SAAtB,SAAgCF,KADnBA,WAMrB,cAAC/B,EAAA,EAAD,CACEC,QAAQ,KACRC,QAAM,EACNhB,UAAU,MACViB,GAAI,CAAEM,SAAU,EAAGJ,QAAS,CAAEC,GAAI,OAAQC,GAAI,SAJhD,mBAQA,cAACC,EAAA,EAAD,CAAKL,GAAI,CAAEM,SAAU,EAAGJ,QAAS,CAAEC,GAAI,OAAQC,GAAI,SAAnD,SACGnB,EAAM0C,KAAI,SAACC,GAAD,OACT,cAACG,EAAA,EAAD,CAEEnB,QAAStB,EACTU,GAAI,CAAEgC,GAAI,EAAGjB,MAAO,QAASb,QAAS,SAHxC,SAKG0B,GAJIA,gBC1FRK,G,OAAO,SAACC,GAKpB,OAAQ,qCACP,cAACC,EAAD,IAEA,qBAAKC,UAAS,kBAAd,SACEF,EAAMG,gBCFKC,EATG,SAACJ,GAElB,OADDK,QAAQC,IAAI,gBAAiBN,EAAMpD,OAC3BoD,EAAMpD,MACZ,cAAC,EAAD,UACEoD,EAAMG,WAEL,mCAAGH,EAAMG,YCLRI,EAAqB,SAACC,GAE3B,OADAH,QAAQC,IAAIE,EAAM,QAEjB,cAAC,EAAD,CAAW5D,MAAO4D,EAAM5D,MAAxB,SACC,cAAC,IAAD,CACCF,KAAM8D,EAAM9D,KACZ+D,OAAQ,SAAAT,GAAK,OAEZ,aADA,CACCQ,EAAM3D,UAAP,2BAAqBmD,GAArB,IAA4BvD,OAAQ+D,EAAM/D,gBAMlCiE,EAAY,WACxB,OACC,cAAC,IAAD,UACC,cAAC,IAAD,UACEjE,EAAOgD,KAAI,SAACe,EAAOG,GAAR,OACX,cAAC,EAAD,eAAgCH,GAAPG,W,iCCjBxBC,EAAQC,YAAY,CACxBC,QAAS,CACPC,QAASC,IACTC,UAAWC,OAWAC,EARH,WACV,OACI,cAACC,EAAA,EAAD,CAAeR,MAAOA,EAAtB,SACE,cAAC,EAAD,O,QCdD,SAASS,IAAwB,IAAbC,EAAY,uDAAH,EAClC,OAAO,IAAIC,SAAQ,SAACC,GAAD,OACjBC,YAAW,kBAAMD,EAAQ,CAAEtF,KAAMoF,MAAW,QCAhD,IAUaI,EAAiBC,YAC5B,qBAD4C,uCAE5C,WAAOL,GAAP,eAAAzF,EAAA,sEACyBwF,EAAWC,GADpC,cACQtF,EADR,yBAGSA,EAASE,MAHlB,2CAF4C,uDASjC0F,EAAeC,YAAY,CACtCC,KAAM,UACNC,aArBmB,CACnBC,MAAO,EACPC,OAAQ,QAqBRC,SAAU,CACRC,UAAW,SAACC,GAKVA,EAAMJ,OAAS,GAEjBK,UAAW,SAACD,GACVA,EAAMJ,OAAS,GAGjBM,kBAAmB,SAACF,EAAOG,GACzBH,EAAMJ,OAASO,EAAOC,UAK1BC,cAAe,SAACC,GACdA,EACGC,QAAQjB,EAAekB,SAAS,SAACR,GAChCA,EAAMH,OAAS,aAEhBU,QAAQjB,EAAemB,WAAW,SAACT,EAAOG,GACzCH,EAAMH,OAAS,OACfG,EAAMJ,OAASO,EAAOC,cAKvB,EAAoDZ,EAAakB,QAgBzDlB,GAhBR,EAAQO,UAAR,EAAmBE,UAAnB,EAA8BC,kBAgBtBV,EAAf,SCrEamB,EAAQC,YAAe,CAClCC,QAAS,CACPC,QAASC,K,QCOO5D,QACW,cAA7B6D,OAAO/H,SAASgI,UAEe,UAA7BD,OAAO/H,SAASgI,UAEhBD,OAAO/H,SAASgI,SAASC,MACvB,2DCVNC,IAAS9C,OACP,cAAC,IAAM+C,WAAP,UACE,cAAC,IAAD,CAAUT,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJU,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9H,MAAK,SAAC+H,GAClCA,EAAaC,iB","file":"static/js/main.96c9100b.chunk.js","sourcesContent":["import React from 'react';\nimport { useLocation } from 'react-router-dom';\n\nconst NotFound = () => {\n\tlet location = useLocation();\n\treturn (\n\t\t<div>\n\t\t\t<h3>\n\t\t\t\tPage not found<code>{location.pathname}</code>\n\t\t\t</h3>\n\t\t</div>\n\t);\n}\n\nexport default NotFound;","import React, { useEffect, useState } from 'react';\nimport { API_KEY } from '../../config/openweather';\n\nconst Weather = () => {\n    const [weatherData, setweatherData] = useState(null);\n    const getWeather = async () => {\n        return fetch(`https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid=${API_KEY}`)\n            .then(response => response.json())\n            .then(data => {\n                setweatherData(data);\n            }).catch((e) => setweatherData(e));\n    }\n    useEffect(() => {\n        getWeather();\n    }, []);\n    return (\n        <div>\n            {JSON.stringify(weatherData)}\n        </div>\n    );\n}\n\nexport default Weather;\n","export const API_KEY =  \"fd26fa84170da6ba612a200c1f56cf61\";","import React from 'react';\nimport Weather from '../weather/Weather';\n\nconst HomePage = () => {\n\treturn (\n\t\t<div>\n\t\t\t<Weather/>\n\t\t</div>\n\t);\n}\n\nexport default HomePage;","// import { Login } from \"../components/Login/Login\";\nimport NotFound from \"../features/404/NotFound\";\nimport Home  from \"../features/home/Home\";\n// import { Mock } from \"../components/Mock/Mock\";\n// import MockInit from \"../components/Mock/MockInit\";\n\nexport const routes = [\n\t{\n\t\tpath: \"/\",\n\t\texact: true,\n\t\tinner: true,\n\t\tcomponent: Home\n\t},\n\t{\n\t\tpath: \"/home\",\n\t\tinner: true,\n\t\tcomponent: Home,\n\t\t//   routes: [\n\t\t// \t{\n\t\t// \t  path: \"/tacos/bus\",\n\t\t// \t  component: Bus\n\t\t// \t},\n\t\t// \t{\n\t\t// \t  path: \"/tacos/cart\",\n\t\t// \t  component: Cart\n\t\t// \t}\n\t\t//   ]\n\t},\n\t{\n\t\tpath: '*',\n\t\tcomponent: NotFound\n\t}\n];","import * as React from 'react';\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\nimport Menu from '@mui/material/Menu';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport Container from '@mui/material/Container';\n// import Avatar from '@mui/material/Avatar';\nimport Button from '@mui/material/Button';\n// import Tooltip from '@mui/material/Tooltip';\nimport MenuItem from '@mui/material/MenuItem';\n\nconst pages = ['Weather'];\n// const settings = ['Profile', 'Account', 'Dashboard', 'Logout'];\n\nconst ResponsiveAppBar = () => {\n  const [anchorElNav, setAnchorElNav] = React.useState(null);\n//   const [anchorElUser, setAnchorElUser] = React.useState(null);\n\n  const handleOpenNavMenu = (event) => {\n    setAnchorElNav(event.currentTarget);\n  };\n//   const handleOpenUserMenu = (event) => {\n//     setAnchorElUser(event.currentTarget);\n//   };\n\n  const handleCloseNavMenu = () => {\n    setAnchorElNav(null);\n  };\n\n//   const handleCloseUserMenu = () => {\n//     setAnchorElUser(null);\n//   };\n  return (\n    <AppBar position=\"static\">\n      <Container maxWidth=\"xl\">\n        <Toolbar disableGutters>\n          <Typography\n            variant=\"h6\"\n            noWrap\n            component=\"div\"\n            sx={{ mr: 2, display: { xs: 'none', md: 'flex' } }}\n          >\n            #Labs\n          </Typography>\n\n          <Box sx={{ flexGrow: 1, display: { xs: 'flex', md: 'none' } }}>\n            <IconButton\n              size=\"large\"\n              aria-label=\"account of current user\"\n              aria-controls=\"menu-appbar\"\n              aria-haspopup=\"true\"\n              onClick={handleOpenNavMenu}\n              color=\"inherit\"\n            >\n              <MenuIcon />\n            </IconButton>\n            <Menu\n              id=\"menu-appbar\"\n              anchorEl={anchorElNav}\n              anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'left',\n              }}\n              keepMounted\n              transformOrigin={{\n                vertical: 'top',\n                horizontal: 'left',\n              }}\n              open={Boolean(anchorElNav)}\n              onClose={handleCloseNavMenu}\n              sx={{\n                display: { xs: 'block', md: 'none' },\n              }}\n            >\n              {pages.map((page) => (\n                <MenuItem key={page} onClick={handleCloseNavMenu}>\n                  <Typography textAlign=\"center\">{page}</Typography>\n                </MenuItem>\n              ))}\n            </Menu>\n          </Box>\n          <Typography\n            variant=\"h6\"\n            noWrap\n            component=\"div\"\n            sx={{ flexGrow: 1, display: { xs: 'flex', md: 'none' } }}\n          >\n            #Labs\n          </Typography>\n          <Box sx={{ flexGrow: 1, display: { xs: 'none', md: 'flex' } }}>\n            {pages.map((page) => (\n              <Button\n                key={page}\n                onClick={handleCloseNavMenu}\n                sx={{ my: 2, color: 'white', display: 'block' }}\n              >\n                {page}\n              </Button>\n            ))}\n          </Box>\n\n          {/* <Box sx={{ flexGrow: 0 }}>\n            <Tooltip title=\"Open settings\">\n              <IconButton onClick={handleOpenUserMenu} sx={{ p: 0 }}>\n                <Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/2.jpg\" />\n              </IconButton>\n            </Tooltip>\n            <Menu\n              sx={{ mt: '45px' }}\n              id=\"menu-appbar\"\n              anchorEl={anchorElUser}\n              anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n              }}\n              keepMounted\n              transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n              }}\n              open={Boolean(anchorElUser)}\n              onClose={handleCloseUserMenu}\n            >\n              {settings.map((setting) => (\n                <MenuItem key={setting} onClick={handleCloseUserMenu}>\n                  <Typography textAlign=\"center\">{setting}</Typography>\n                </MenuItem>\n              ))}\n            </Menu>\n          </Box> */}\n        </Toolbar>\n      </Container>\n    </AppBar>\n  );\n};\nexport default ResponsiveAppBar;\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from 'react';\n// import { Sidebar } from '../Sidebar/Sidebar';\nimport Header from './Header';\nimport './main.scss';\nexport const Main = (props) => {\n\t// const [open, setopen] = useState(false);\n\t// const toggle = () => {\n\t// \tsetopen(!open)\n\t// }\n\treturn (<>\n\t\t<Header/>\n\t\t{/* <Sidebar open={open} onClose={toggle} /> */}\n\t\t<div className={`inner-page open`}>\n\t\t\t{props.children}\n\t\t</div>\n\t</>\n\t)\n}\n","import React from 'react';\nimport { Main } from './Main';\n\nconst AppLayout = (props) => {\nconsole.log(\"render layout\", props.inner);\n\treturn props.inner ? (\n\t\t<Main>\n\t\t\t{props.children}\n\t\t</Main>\n\t) : <>{props.children}</>;\n}\n\nexport default AppLayout;","import React from 'react'\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport { routes } from './router-config';\nimport AppLayout from '../layout/AppLayout';\nconst RouteWithSubRoutes = (route) => {\n\tconsole.log(route,\"rout\");\n\treturn (\n\t\t<AppLayout inner={route.inner}>\n\t\t\t<Route\n\t\t\t\tpath={route.path}\n\t\t\t\trender={props => (\n\t\t\t\t\t// pass the sub-routes down to keep nesting\n\t\t\t\t\t<route.component {...props} routes={route.routes} />\n\t\t\t\t)}\n\t\t\t/>\n\t\t</AppLayout>\n\t);\n}\nexport const AppRouter = () => {\n\treturn (\n\t\t<HashRouter>\n\t\t\t<Switch>\n\t\t\t\t{routes.map((route, i) => (\n\t\t\t\t\t<RouteWithSubRoutes key={i} {...route} />\n\t\t\t\t))}\n\t\t\t</Switch>\n\t\t</HashRouter >\n\t);\n}","import React from 'react';\n// import './App.scss';\nimport { AppRouter } from './router/Router';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport lightBlue from '@mui/material/colors/lightBlue';\nimport red from '@mui/material/colors/red';\nconst theme = createTheme({\n  palette: {\n    primary: red,\n    secondary: lightBlue,\n  }\n});\nconst App = () => {\n  return (\n      <ThemeProvider theme={theme}>\n        <AppRouter />\n      </ThemeProvider>\n  );\n}\n\nexport default App;","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}